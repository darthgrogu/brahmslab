// <auto-generated />
using System;
using BrahmsLab.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrahmsLab.DataAccess.Migrations
{
    [DbContext(typeof(BrahmsLabDbContext))]
    [Migration("20250825140355_InitialLocalDatabaseSchema")]
    partial class InitialLocalDatabaseSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("BrahmsLab.Core.Models.LocalSession", b =>
                {
                    b.Property<int>("LocalSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AngleLightToSensor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DistanceTargetToSensor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstrumentModel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LensFieldOfView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LightSourceType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MeasurementAreaDiameter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatorName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpticalSetupDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProtocolSessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ServerSessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WhiteReferenceDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocalSessionId");

                    b.ToTable("LocalSessions");
                });

            modelBuilder.Entity("BrahmsLab.Core.Models.LocalSpectralReading", b =>
                {
                    b.Property<int>("LocalReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnnualHumidityMax")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnnualHumidityMin")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnnualTempMax")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnnualTempMin")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasBackgroundInMeasurement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HasGlue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasLowReflectanceBackground")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HasNonGlueContamination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HerbariumCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsHumidityControlled")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsTempControlled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocalSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MeasurementFlags")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementIndex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PercentBackgroundInMeasurement")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ServerReadingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecimenId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpectralDataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetTissueId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TissueDevelopmentalStage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TissueLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("TissueNotes")
                        .HasColumnType("TEXT");

                    b.HasKey("LocalReadingId");

                    b.HasIndex("LocalSessionId");

                    b.ToTable("LocalSpectralReadings");
                });

            modelBuilder.Entity("BrahmsLab.Core.Models.LocalSpectralReading", b =>
                {
                    b.HasOne("BrahmsLab.Core.Models.LocalSession", "Session")
                        .WithMany("SpectralReadings")
                        .HasForeignKey("LocalSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BrahmsLab.Core.Models.LocalSession", b =>
                {
                    b.Navigation("SpectralReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
